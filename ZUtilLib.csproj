<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.1</TargetFramework>
    <Title>Zachnad0's Personal Utility Library</Title>
    <Authors>Zachnad0</Authors>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <PackageId>Zachnad0.UtilLib</PackageId>
    <Description>This is merely a perpetually WIP personal library intended only for personal use, though if one finds it useful, they may use it freely due to it being on a BSD 3-clause license.
Features:
- Essential generic utility methods, especially for 2D arrays/matrices!
- Custom object-oriented algebra and calculus tool (WIP).
- Experimental AI neural networks (general AND convolutional (v3+)) plus training utils.
- ZMatrix class for more easily working with matrices (v3+).</Description>
    <PackageLicenseFile>LICENSE.md</PackageLicenseFile>
    <RepositoryUrl>https://github.com/Zachnad0/ZUtilLib</RepositoryUrl>
    <PackageIcon>icon.png</PackageIcon>
    <PackageTags>Zachnad0; Utility; Matrix-Utils; AI; Neural-Network; Convolutional-Neural-Network;</PackageTags>
    <NeutralLanguage>en-001</NeutralLanguage>
    <Version>3.1.0</Version>
    <RepositoryType>git</RepositoryType>
    <PackageReleaseNotes>3.1.0:
- ADDED PackagedConvNeuralNetwork to ZAI.Saving, which is a json-serializable data structure for saving the data of a convolutional neural network. Essential for actually saving models. Use this struct's constructor to package, and one of the neural net's constructors to un-pack the data.
- RENAMED ConvolutionalNeuralNetworks class to ConvNeuralNetworks. Why did I make it so long initially?
- FIXED some XML documentation.

3.0.0: // This update is quite massive and took forever. That is why I skipped version 2.
- ADDED convolutional neural networks...
- ADDED 5 more activation functions.
- ADDED byte[,].ToFloatMatrix() which converts a matrix of bytes into a matrix of floats.
- ADDED float[,].NormalizeMatrix(bool) that returns a normalized float matrix.
- ADDED float[].NormalizeArray(bool) that returns a normalized float array.
- CHANGED namespace arrangement so that classic NNs are under ZAI.FFNeuralNetworks
- ADDED namespace for convolutional neural networks under ZAI.ConvNeuralNetworks
- CHANGED static class GraphStuff name to Equations
- ADDED System.Random.NextMatrix(int, int, ?bool) that returns a random float matrix of given size.
- ADDED System.Random.NextArray(int, ?bool) that returns a random float array of given size.
- ADDED entire ZMatrix class which has some implicit conversion and operators and stuff for dealing with float matrices.
- ADDED (T[,] OR T[][] OR T[]).Foreach&lt;T&gt;(Action&lt;int, int, T&gt; (just Action&lt;int, T&gt; for array)) that runs an action for each value, utilizing x, y, (i for array) and the value at that point of the matrix (or array).
- ADDED T[,].SetEach&lt;T&gt;(Func&lt;int, int, T, T&gt;) that runs a func overwriting each value, utilizing x, y, and current value in the matrix. (Also available for T[][] and T[])
- ADDED  ZUtils.LCM(double[]) for getting the lowest common multiple.
- ADDED ZUtils.LinesToCharMatrix(string[]) for converting lines of strings into a char matrix.
- ADDED A LOT MORE TO ZUtils, incl. to and from jagged matrix conversions (ridiculously convenient!!!), and accompanying useful stuff. I recommend checking source code for serious usage.

1.3.4:
- ADDED allow decimal number parameter for ZUtils.FilterNumbers.
- FIXED README AI tutorial info to be actually up to date, and finally made it actually markdown instead of HTML.
- FIXED ZAI.Training.NeuralNetTrainingOptions so that the fields LearningRate and MutateChance are changeable (because they should be).
- FIXED ZAI.Training.NeuralNetTrainingOptions so that all of the fields are included for JSON serialization, and there is a JsonConstructor, therefore it is now serializable.

1.3.3:
- FIXED the fact that multithreading was LIMITED TO 1???
- ADDED method for quickly deriving a generation based off an array of pre-existing neural networks.

1.3.2:
- ADDED Greek alphabet, because why not.

1.3.1:
- ADDED Neural network training async task, for training some/an initial network(s) or a new network, against  a provided multi-input and output target function.
- FIXED Random network generation only generating positive initial weights and biases, so amplitude is actually treated as such.
- FIXED Naming outputs (and inputs) is now entirely optional.
- FIXED Calculation inputs are no longer limited between 1 and 0.</PackageReleaseNotes>
    <GenerateDocumentationFile>True</GenerateDocumentationFile>
    <PackageReadmeFile>README.md</PackageReadmeFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DebugType>full</DebugType>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DebugType>full</DebugType>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="TESTING\**" />
    <EmbeddedResource Remove="TESTING\**" />
    <None Remove="TESTING\**" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="icon.png" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="icon.png">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.Text.Json" Version="7.0.3" />
  </ItemGroup>

  <ItemGroup>
    <None Update="LICENSE.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
    <None Update="README.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

</Project>
